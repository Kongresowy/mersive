{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["time","Date","getTime","toString","slice","App","state","meetings","isFull","getCalendar","axios","get","then","res","data","setState","console","log","headers","catch","error","getDayNum","getDayText","getFormatedHours","arg","goFull","this","enabled","onChange","className","some","item","startTime","endTime","map","key","id","title","organizer","style","display","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAIIA,GAAO,IAAIC,MAAOC,UAAUC,WAAWC,MAAM,EAAG,IA2HrCC,E,2MAvHbC,MAAQ,CACNC,SAAU,GACVC,QAAQ,G,EAiBVC,YAAc,WACVC,IAAMC,IAAI,wEAAwEC,MAAK,SAAAC,GACrF,IAAMC,EAAOD,EAAIC,KACjB,EAAKC,SAAS,CAAER,SAAUO,IAC1BE,QAAQC,IAAIJ,EAAIK,SAChBF,QAAQC,IAAI,0BAA2B,EAAKX,MAAMC,aACjDY,OAAM,SAAAC,GACPJ,QAAQI,MAAM,UAAWA,O,EAQ/BC,UAAY,WACV,OAAO,IAAIpB,MAAOE,WAAWC,MAAM,EAAG,K,EAGxCkB,WAAa,WACX,OAAO,IAAIrB,MAAOE,WAAWC,MAAM,EAAG,I,EAGxCmB,iBAAmB,SAACC,GAClB,OAAO,IAAIvB,KAAW,IAANuB,GAAYrB,WAAWC,MAAM,GAAI,K,EA4BnDqB,OAAS,WACL,EAAKV,SAAS,CAACP,QAAQ,K,mFAlEzBkB,KAAKjB,gB,+BAqEG,IAAD,OAGHK,EAAOY,KAAKpB,MAAMC,SAEtB,OACE,kBAAC,IAAD,CAAYoB,QAASD,KAAKpB,MAAME,OAAQoB,SAAU,SAAApB,GAAM,OAAI,EAAKO,SAAS,CAACP,aAC3E,6BACE,6BACE,yBAAKqB,UAAU,iBACb,6BAAMH,KAAKL,aACX,6BAAMK,KAAKJ,eAEZR,EAAKgB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WAAahC,GAAQ+B,EAAKE,SAAWjC,KAC3D,6BACE,yBAAK6B,UAAU,aAAf,UACA,yBAAKA,UAAU,kBAAf,cAGA,6BACA,yBAAKA,UAAU,cAAf,UACA,yBAAKA,UAAU,iBAAf,eAKN,yBAAKA,UAAU,YACZf,EAAKoB,KAAI,SAACH,GAAD,OACR/B,EAAO+B,EAAKE,QACV,yBAAKE,IAAKJ,EAAKK,IACb,6BAAM,EAAKb,iBAAiBQ,EAAKC,WAAjC,MAAgD,EAAKT,iBAAiBQ,EAAKE,UAC3E,6BAAMF,EAAKM,MAAX,MAAqBN,EAAKO,YACnB,UAGY,IAAtBZ,KAAKpB,MAAME,OAAmB,4BAAQ+B,MAAO,CAACC,QAAS,SAAUC,QAASf,KAAKD,QAAjD,cAA+E,4BAAQc,MAAO,CAACC,QAAS,gB,GA/GjIE,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.01239b72.chunk.js","sourcesContent":["import React from 'react';\nimport Fullscreen from \"react-full-screen\";\nimport axios from 'axios';\n\nlet time = new Date().getTime().toString().slice(0, 10);\n// var elem = document.documentElement;\n\nclass App extends React.Component {\n  state = {\n    meetings: [],\n    isFull: false\n  }\n\n  componentDidMount() {\n    this.getCalendar();\n  }\n\n  // getCalendar = async () => {\n  //   try {\n  //     const data = await fetch(\"https://192.168.43.1/api/calendar\").then(data => data.json());\n  //     this.setState({ meetings: data });\n  //     console.log(\"Meetings from Mersive: \", this.state.meetings);\n  //   } catch (error) {\n  //     console.error(\"Error: \" + error);\n  //   }\n  // }\n\n  getCalendar = () => {\n      axios.get(\"https://cors-anywhere.herokuapp.com/http://192.168.43.1/api/calendar\").then(res => {\n        const data = res.data;\n        this.setState({ meetings: data });\n        console.log(res.headers);\n        console.log(\"Meetings from Mersive: \", this.state.meetings);\n      }).catch(error => {\n        console.error(\"Error: \", error)\n      });\n  }\n\n  // above test with Axios\n\n  // https://cors-anywhere.herokuapp.com/\n\n  getDayNum = () => {\n    return new Date().toString().slice(8, 10);\n  }\n\n  getDayText = () => {\n    return new Date().toString().slice(0, 3);\n  }\n\n  getFormatedHours = (arg) => {\n    return new Date(arg * 1000).toString().slice(16, 21);\n  }\n\n  // openFullscreen = () => {\n  //   if (elem.requestFullscreen) {\n  //     elem.requestFullscreen();\n  //   } else if (elem.mozRequestFullScreen) { /* Firefox */\n  //     elem.mozRequestFullScreen();\n  //   } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n  //     elem.webkitRequestFullscreen();\n  //   } else if (elem.msRequestFullscreen) { /* IE/Edge */\n  //     elem.msRequestFullscreen();\n  //   }\n  // }\n  \n  // /* Close fullscreen */\n  // closeFullscreen = () => {\n  //   if (document.exitFullscreen) {\n  //     document.exitFullscreen();\n  //   } else if (document.mozCancelFullScreen) { /* Firefox */\n  //     document.mozCancelFullScreen();\n  //   } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n  //     document.webkitExitFullscreen();\n  //   } else if (document.msExitFullscreen) { /* IE/Edge */\n  //     document.msExitFullscreen();\n  //   }\n  // }\n\n  goFull = () => {\n      this.setState({isFull: true});\n  }\n\n  render() {\n    // document.documentElement.webkitRequestFullscreen(); // nie działa!\n    // setInterval(() => {window.location.reload();}, 100000); // odświeżanie działa!\n    let data = this.state.meetings;\n\n    return (\n      <Fullscreen enabled={this.state.isFull} onChange={isFull => this.setState({isFull})}>\n      <div>\n        <div>\n          <div className=\"todayDateTile\">\n            <div>{this.getDayNum()}</div>\n            <div>{this.getDayText()}</div>\n          </div>\n          {data.some(item => item.startTime <= time && item.endTime >= time) ?\n            <div>\n              <div className=\"usedInUse\">IN USE</div>\n              <div className=\"blankAvailable\">AVAILABLE</div>\n            </div>\n\n            : <div>\n              <div className=\"blankInUse\">IN USE</div>\n              <div className=\"usedAvailable\">AVAILABLE</div>\n            </div>\n          }\n        </div>\n\n        <div className=\"meetings\">\n          {data.map((item) => (\n            time < item.endTime ?\n              <div key={item.id}>\n                <div>{this.getFormatedHours(item.startTime)} - {this.getFormatedHours(item.endTime)}</div>\n                <div>{item.title} | {item.organizer}</div>\n              </div> : null\n          ))}\n        </div>\n            {this.state.isFull === false ? <button style={{display: \"block\"}} onClick={this.goFull}>Fullscreen</button> : <button style={{display: \"none\"}}></button>}\n\n        {/* <button style={ { display: `${ this.state.buttonStyle }` } } onClick={this.goFull}>Fullscreen</button> */}\n      </div>\n    </Fullscreen>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}